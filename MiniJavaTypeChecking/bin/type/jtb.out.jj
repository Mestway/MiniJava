/* Generated by JTB 1.4.7 */


options
{
  JAVA_UNICODE_ESCAPE = true;
  JDK_VERSION = "1.6";
  static = true;
  // JTB_P = "type";
}

PARSER_BEGIN(MiniJavaParser)
import type.syntaxtree.*;


public class MiniJavaParser {}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token t) {
    return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
  }
}

PARSER_END(MiniJavaParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN :
{
  < SINGLE_LINE_COMMENT : "//" ( ~["\n", "\r"] )* ( "\n"| "\r"| "\r\n" ) >
| < FORMAL_COMMENT : "/**" ( ~["*"] )* "*" ( "*"| ( ~["*", "/"] ( ~["*"] )* "*" ) )* "/" >
| < MULTI_LINE_COMMENT : "/*" ( ~["*"] )* "*" ( "*"| ( ~["*", "/"] ( ~["*"] )* "*" ) )* "/" >
}

TOKEN :
{
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LSQPAREN : "[" >
| < RSQPAREN : "]" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < SEMICOLON : ";" >
| < DOT : "." >
| < ASSIGN : "=" >
| < LT : "<" >
| < PLUS : "+" >
| < MINUS : "-" >
| < AND : "&&" >
| < NOT : "!" >
| < BOOLEAN : "boolean" >
| < CLASS : "class" >
| < INTERFACE : "interface" >
| < ELSE : "else" >
| < EXTENDS : "extends" >
| < FALSE : "false" >
| < IF : "if" >
| < WHILE : "while" >
| < INTEGER : "int" >
| < LENGTH : "length" >
| < MAIN : "main" >
| < NEW : "new" >
| < PUBLIC : "public" >
| < RETURN : "return" >
| < STATIC : "static" >
| < STRING : "String" >
| < THIS : "this" >
| < TRUE : "true" >
| < PRINT : "System.out.println" >
| < VOID : "void" >
}

TOKEN :
{
  < INTEGER_LITERAL : ( ["1"-"9"] ( ["0"-"9"] )*| "0" ) >
}

TOKEN :
{
  < IDENTIFIER : <LETTER> ( <LETTER>| <DIGIT> )* >
| < #LETTER : ["$", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"] >
| < #DIGIT : ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"] >
}

/************************************
 * The MiniJava Grammar Starts Here *
 ************************************/
Goal Goal() :
{
  // --- JTB generated node declarations ---
  MainClass n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  TypeDeclaration n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n0 = MainClass()
  (
    n2 = TypeDeclaration()
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  n4 = < EOF >
  {
    n4.beginColumn++;
    n4.endColumn++;
    { n3 = JTBToolkit.makeNodeToken(n4); }
  }
  { return new Goal(n0, n1, n3); }
}

MainClass MainClass() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Identifier n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  Identifier n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  NodeListOptional n26 = new NodeListOptional();
  VarDeclaration n27 = null;
  NodeListOptional n28 = new NodeListOptional();
  Statement n29 = null;
  NodeToken n30 = null;
  Token n31 = null;
  NodeToken n32 = null;
  Token n33 = null;
}
{
  n1 = "class"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Identifier()
  n4 = "{"
  { n3 = JTBToolkit.makeNodeToken(n4); }
  n6 = "public"
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n8 = "static"
  { n7 = JTBToolkit.makeNodeToken(n8); }
  n10 = "void"
  { n9 = JTBToolkit.makeNodeToken(n10); }
  n12 = "main"
  { n11 = JTBToolkit.makeNodeToken(n12); }
  n14 = "("
  { n13 = JTBToolkit.makeNodeToken(n14); }
  n16 = "String"
  { n15 = JTBToolkit.makeNodeToken(n16); }
  n18 = "["
  { n17 = JTBToolkit.makeNodeToken(n18); }
  n20 = "]"
  { n19 = JTBToolkit.makeNodeToken(n20); }
  n21 = Identifier()
  n23 = ")"
  { n22 = JTBToolkit.makeNodeToken(n23); }
  n25 = "{"
  { n24 = JTBToolkit.makeNodeToken(n25); }
  (
    LOOKAHEAD( 2 )
    n27 = VarDeclaration()
    { n26.addNode(n27); }
  )*
  { n26.nodes.trimToSize(); }
  (
    n29 = Statement()
    { n28.addNode(n29); }
  )*
  { n28.nodes.trimToSize(); }
  n31 = "}"
  { n30 = JTBToolkit.makeNodeToken(n31); }
  n33 = "}"
  { n32 = JTBToolkit.makeNodeToken(n33); }
  { return new MainClass(n0, n2, n3, n5, n7, n9, n11, n13, n15, n17, n19, n21, n22, n24, n26, n28, n30, n32); }
}

TypeDeclaration TypeDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  ClassDeclaration n1 = null;
  ClassExtendsDeclaration n2 = null;
}
{
  (
    LOOKAHEAD( 3 )
    n1 = ClassDeclaration()
    { n0 = new NodeChoice(n1, 0, 2); }
  |
    n2 = ClassExtendsDeclaration()
    { n0 = new NodeChoice(n2, 1, 2); }
  )
  { return new TypeDeclaration(n0); }
}

ClassDeclaration ClassDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Identifier n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeListOptional n5 = new NodeListOptional();
  VarDeclaration n6 = null;
  NodeListOptional n7 = new NodeListOptional();
  MethodDeclaration n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
}
{
  n1 = "class"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Identifier()
  n4 = "{"
  { n3 = JTBToolkit.makeNodeToken(n4); }
  (
    n6 = VarDeclaration()
    { n5.addNode(n6); }
  )*
  { n5.nodes.trimToSize(); }
  (
    n8 = MethodDeclaration()
    { n7.addNode(n8); }
  )*
  { n7.nodes.trimToSize(); }
  n10 = "}"
  { n9 = JTBToolkit.makeNodeToken(n10); }
  { return new ClassDeclaration(n0, n2, n3, n5, n7, n9); }
}

ClassExtendsDeclaration ClassExtendsDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Identifier n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Identifier n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeListOptional n8 = new NodeListOptional();
  VarDeclaration n9 = null;
  NodeListOptional n10 = new NodeListOptional();
  MethodDeclaration n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
}
{
  n1 = "class"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Identifier()
  n4 = "extends"
  { n3 = JTBToolkit.makeNodeToken(n4); }
  n5 = Identifier()
  n7 = "{"
  { n6 = JTBToolkit.makeNodeToken(n7); }
  (
    n9 = VarDeclaration()
    { n8.addNode(n9); }
  )*
  { n8.nodes.trimToSize(); }
  (
    n11 = MethodDeclaration()
    { n10.addNode(n11); }
  )*
  { n10.nodes.trimToSize(); }
  n13 = "}"
  { n12 = JTBToolkit.makeNodeToken(n13); }
  { return new ClassExtendsDeclaration(n0, n2, n3, n5, n6, n8, n10, n12); }
}

VarDeclaration VarDeclaration() :
{
  // --- JTB generated node declarations ---
  Type n0 = null;
  Identifier n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
}
{
  n0 = Type()
  n1 = Identifier()
  n3 = ";"
  { n2 = JTBToolkit.makeNodeToken(n3); }
  { return new VarDeclaration(n0, n1, n2); }
}

MethodDeclaration MethodDeclaration() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Type n2 = null;
  Identifier n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeOptional n6 = new NodeOptional();
  FormalParameterList n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeListOptional n12 = new NodeListOptional();
  VarDeclaration n13 = null;
  NodeListOptional n14 = new NodeListOptional();
  Statement n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  Expression n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
}
{
  n1 = "public"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Type()
  n3 = Identifier()
  n5 = "("
  { n4 = JTBToolkit.makeNodeToken(n5); }
  (
    n7 = FormalParameterList()
    { n6.addNode(n7); }
  )?
  n9 = ")"
  { n8 = JTBToolkit.makeNodeToken(n9); }
  n11 = "{"
  { n10 = JTBToolkit.makeNodeToken(n11); }
  (
    LOOKAHEAD( 2 )
    n13 = VarDeclaration()
    { n12.addNode(n13); }
  )*
  { n12.nodes.trimToSize(); }
  (
    n15 = Statement()
    { n14.addNode(n15); }
  )*
  { n14.nodes.trimToSize(); }
  n17 = "return"
  { n16 = JTBToolkit.makeNodeToken(n17); }
  n18 = Expression()
  n20 = ";"
  { n19 = JTBToolkit.makeNodeToken(n20); }
  n22 = "}"
  { n21 = JTBToolkit.makeNodeToken(n22); }
  { return new MethodDeclaration(n0, n2, n3, n4, n6, n8, n10, n12, n14, n16, n18, n19, n21); }
}

FormalParameterList FormalParameterList() :
{
  // --- JTB generated node declarations ---
  FormalParameter n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  FormalParameterRest n2 = null;
}
{
  n0 = FormalParameter()
  (
    n2 = FormalParameterRest()
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new FormalParameterList(n0, n1); }
}

FormalParameter FormalParameter() :
{
  // --- JTB generated node declarations ---
  Type n0 = null;
  Identifier n1 = null;
}
{
  n0 = Type()
  n1 = Identifier()
  { return new FormalParameter(n0, n1); }
}

FormalParameterRest FormalParameterRest() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  FormalParameter n2 = null;
}
{
  n1 = ","
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = FormalParameter()
  { return new FormalParameterRest(n0, n2); }
}

Type Type() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  ArrayType n1 = null;
  BooleanType n2 = null;
  IntegerType n3 = null;
  Identifier n4 = null;
}
{
  (
    LOOKAHEAD( 3 )
    n1 = ArrayType()
    { n0 = new NodeChoice(n1, 0, 4); }
  |
    n2 = BooleanType()
    { n0 = new NodeChoice(n2, 1, 4); }
  |
    n3 = IntegerType()
    { n0 = new NodeChoice(n3, 2, 4); }
  |
    n4 = Identifier()
    { n0 = new NodeChoice(n4, 3, 4); }
  )
  { return new Type(n0); }
}

ArrayType ArrayType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
}
{
  n1 = "int"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "["
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = "]"
  { n4 = JTBToolkit.makeNodeToken(n5); }
  { return new ArrayType(n0, n2, n4); }
}

BooleanType BooleanType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = "boolean"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new BooleanType(n0); }
}

IntegerType IntegerType() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = "int"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new IntegerType(n0); }
}

Statement Statement() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Block n1 = null;
  AssignmentStatement n2 = null;
  ArrayAssignmentStatement n3 = null;
  IfStatement n4 = null;
  WhileStatement n5 = null;
  PrintStatement n6 = null;
}
{
  (
    n1 = Block()
    { n0 = new NodeChoice(n1, 0, 6); }
  |
    LOOKAHEAD( 2 )
    n2 = AssignmentStatement()
    { n0 = new NodeChoice(n2, 1, 6); }
  |
    LOOKAHEAD( 2 )
    n3 = ArrayAssignmentStatement()
    { n0 = new NodeChoice(n3, 2, 6); }
  |
    n4 = IfStatement()
    { n0 = new NodeChoice(n4, 3, 6); }
  |
    n5 = WhileStatement()
    { n0 = new NodeChoice(n5, 4, 6); }
  |
    n6 = PrintStatement()
    { n0 = new NodeChoice(n6, 5, 6); }
  )
  { return new Statement(n0); }
}

Block Block() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  Statement n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
}
{
  n1 = "{"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    n3 = Statement()
    { n2.addNode(n3); }
  )*
  { n2.nodes.trimToSize(); }
  n5 = "}"
  { n4 = JTBToolkit.makeNodeToken(n5); }
  { return new Block(n0, n2, n4); }
}

AssignmentStatement AssignmentStatement() :
{
  // --- JTB generated node declarations ---
  Identifier n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  Expression n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
}
{
  n0 = Identifier()
  n2 = "="
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = Expression()
  n5 = ";"
  { n4 = JTBToolkit.makeNodeToken(n5); }
  { return new AssignmentStatement(n0, n1, n3, n4); }
}

ArrayAssignmentStatement ArrayAssignmentStatement() :
{
  // --- JTB generated node declarations ---
  Identifier n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  Expression n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  Expression n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
}
{
  n0 = Identifier()
  n2 = "["
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = Expression()
  n5 = "]"
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n7 = "="
  { n6 = JTBToolkit.makeNodeToken(n7); }
  n8 = Expression()
  n10 = ";"
  { n9 = JTBToolkit.makeNodeToken(n10); }
  { return new ArrayAssignmentStatement(n0, n1, n3, n4, n6, n8, n9); }
}

IfStatement IfStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Statement n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  Statement n10 = null;
}
{
  n1 = "if"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "("
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Expression()
  n6 = ")"
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n7 = Statement()
  n9 = "else"
  { n8 = JTBToolkit.makeNodeToken(n9); }
  n10 = Statement()
  { return new IfStatement(n0, n2, n4, n5, n7, n8, n10); }
}

WhileStatement WhileStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Statement n7 = null;
}
{
  n1 = "while"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "("
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Expression()
  n6 = ")"
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n7 = Statement()
  { return new WhileStatement(n0, n2, n4, n5, n7); }
}

PrintStatement PrintStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  n1 = "System.out.println"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "("
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n4 = Expression()
  n6 = ")"
  { n5 = JTBToolkit.makeNodeToken(n6); }
  n8 = ";"
  { n7 = JTBToolkit.makeNodeToken(n8); }
  { return new PrintStatement(n0, n2, n4, n5, n7); }
}

Expression Expression() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  AndExpression n1 = null;
  CompareExpression n2 = null;
  PlusExpression n3 = null;
  MinusExpression n4 = null;
  TimesExpression n5 = null;
  ArrayLookup n6 = null;
  ArrayLength n7 = null;
  MessageSend n8 = null;
  PrimaryExpression n9 = null;
}
{
  (
    LOOKAHEAD( PrimaryExpression() "&&" )
    n1 = AndExpression()
    { n0 = new NodeChoice(n1, 0, 9); }
  |
    LOOKAHEAD( PrimaryExpression() "<" )
    n2 = CompareExpression()
    { n0 = new NodeChoice(n2, 1, 9); }
  |
    LOOKAHEAD( PrimaryExpression() "+" )
    n3 = PlusExpression()
    { n0 = new NodeChoice(n3, 2, 9); }
  |
    LOOKAHEAD( PrimaryExpression() "-" )
    n4 = MinusExpression()
    { n0 = new NodeChoice(n4, 3, 9); }
  |
    LOOKAHEAD( PrimaryExpression() "*" )
    n5 = TimesExpression()
    { n0 = new NodeChoice(n5, 4, 9); }
  |
    LOOKAHEAD( PrimaryExpression() "[" )
    n6 = ArrayLookup()
    { n0 = new NodeChoice(n6, 5, 9); }
  |
    LOOKAHEAD( PrimaryExpression() "." "length" )
    n7 = ArrayLength()
    { n0 = new NodeChoice(n7, 6, 9); }
  |
    LOOKAHEAD( PrimaryExpression() "." Identifier() "(" )
    n8 = MessageSend()
    { n0 = new NodeChoice(n8, 7, 9); }
  |
    n9 = PrimaryExpression()
    { n0 = new NodeChoice(n9, 8, 9); }
  )
  { return new Expression(n0); }
}

AndExpression AndExpression() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  PrimaryExpression n3 = null;
}
{
  n0 = PrimaryExpression()
  n2 = "&&"
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = PrimaryExpression()
  { return new AndExpression(n0, n1, n3); }
}

CompareExpression CompareExpression() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  PrimaryExpression n3 = null;
}
{
  n0 = PrimaryExpression()
  n2 = "<"
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = PrimaryExpression()
  { return new CompareExpression(n0, n1, n3); }
}

PlusExpression PlusExpression() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  PrimaryExpression n3 = null;
}
{
  n0 = PrimaryExpression()
  n2 = "+"
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = PrimaryExpression()
  { return new PlusExpression(n0, n1, n3); }
}

MinusExpression MinusExpression() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  PrimaryExpression n3 = null;
}
{
  n0 = PrimaryExpression()
  n2 = "-"
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = PrimaryExpression()
  { return new MinusExpression(n0, n1, n3); }
}

TimesExpression TimesExpression() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  PrimaryExpression n3 = null;
}
{
  n0 = PrimaryExpression()
  n2 = "*"
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = PrimaryExpression()
  { return new TimesExpression(n0, n1, n3); }
}

ArrayLookup ArrayLookup() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  PrimaryExpression n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
}
{
  n0 = PrimaryExpression()
  n2 = "["
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = PrimaryExpression()
  n5 = "]"
  { n4 = JTBToolkit.makeNodeToken(n5); }
  { return new ArrayLookup(n0, n1, n3, n4); }
}

ArrayLength ArrayLength() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n0 = PrimaryExpression()
  n2 = "."
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n4 = "length"
  { n3 = JTBToolkit.makeNodeToken(n4); }
  { return new ArrayLength(n0, n1, n3); }
}

MessageSend MessageSend() :
{
  // --- JTB generated node declarations ---
  PrimaryExpression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  Identifier n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeOptional n6 = new NodeOptional();
  ExpressionList n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
}
{
  n0 = PrimaryExpression()
  n2 = "."
  { n1 = JTBToolkit.makeNodeToken(n2); }
  n3 = Identifier()
  n5 = "("
  { n4 = JTBToolkit.makeNodeToken(n5); }
  (
    n7 = ExpressionList()
    { n6.addNode(n7); }
  )?
  n9 = ")"
  { n8 = JTBToolkit.makeNodeToken(n9); }
  { return new MessageSend(n0, n1, n3, n4, n6, n8); }
}

ExpressionList ExpressionList() :
{
  // --- JTB generated node declarations ---
  Expression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  ExpressionRest n2 = null;
}
{
  n0 = Expression()
  (
    n2 = ExpressionRest()
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new ExpressionList(n0, n1); }
}

ExpressionRest ExpressionRest() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Expression n2 = null;
}
{
  n1 = ","
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Expression()
  { return new ExpressionRest(n0, n2); }
}

PrimaryExpression PrimaryExpression() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  IntegerLiteral n1 = null;
  TrueLiteral n2 = null;
  FalseLiteral n3 = null;
  Identifier n4 = null;
  ThisExpression n5 = null;
  ArrayAllocationExpression n6 = null;
  AllocationExpression n7 = null;
  NotExpression n8 = null;
  BracketExpression n9 = null;
}
{
  (
    n1 = IntegerLiteral()
    { n0 = new NodeChoice(n1, 0, 9); }
  |
    n2 = TrueLiteral()
    { n0 = new NodeChoice(n2, 1, 9); }
  |
    n3 = FalseLiteral()
    { n0 = new NodeChoice(n3, 2, 9); }
  |
    n4 = Identifier()
    { n0 = new NodeChoice(n4, 3, 9); }
  |
    n5 = ThisExpression()
    { n0 = new NodeChoice(n5, 4, 9); }
  |
    LOOKAHEAD( 3 )
    n6 = ArrayAllocationExpression()
    { n0 = new NodeChoice(n6, 5, 9); }
  |
    n7 = AllocationExpression()
    { n0 = new NodeChoice(n7, 6, 9); }
  |
    n8 = NotExpression()
    { n0 = new NodeChoice(n8, 7, 9); }
  |
    n9 = BracketExpression()
    { n0 = new NodeChoice(n9, 8, 9); }
  )
  { return new PrimaryExpression(n0); }
}

IntegerLiteral IntegerLiteral() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < INTEGER_LITERAL >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new IntegerLiteral(n0); }
}

TrueLiteral TrueLiteral() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = "true"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new TrueLiteral(n0); }
}

FalseLiteral FalseLiteral() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = "false"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new FalseLiteral(n0); }
}

Identifier Identifier() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = < IDENTIFIER >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new Identifier(n0); }
}

ThisExpression ThisExpression() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  n1 = "this"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new ThisExpression(n0); }
}

ArrayAllocationExpression ArrayAllocationExpression() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  Expression n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  n1 = "new"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = "int"
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = "["
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n6 = Expression()
  n8 = "]"
  { n7 = JTBToolkit.makeNodeToken(n8); }
  { return new ArrayAllocationExpression(n0, n2, n4, n6, n7); }
}

AllocationExpression AllocationExpression() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Identifier n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  n1 = "new"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Identifier()
  n4 = "("
  { n3 = JTBToolkit.makeNodeToken(n4); }
  n6 = ")"
  { n5 = JTBToolkit.makeNodeToken(n6); }
  { return new AllocationExpression(n0, n2, n3, n5); }
}

NotExpression NotExpression() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Expression n2 = null;
}
{
  n1 = "!"
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Expression()
  { return new NotExpression(n0, n2); }
}

BracketExpression BracketExpression() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Expression n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
}
{
  n1 = "("
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Expression()
  n4 = ")"
  { n3 = JTBToolkit.makeNodeToken(n4); }
  { return new BracketExpression(n0, n2, n3); }
}
