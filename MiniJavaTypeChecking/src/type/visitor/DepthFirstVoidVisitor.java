/* Generated by JTB 1.4.7 */
package type.visitor;

import type.syntaxtree.*;
import java.util.*;

public class DepthFirstVoidVisitor implements IVoidVisitor {


  public void visit(final NodeChoice n) {
    n.choice.accept(this);
    return;
  }

  public void visit(final NodeList n) {
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      e.next().accept(this);
    }
    return;
  }

  public void visit(final NodeListOptional n) {
    if (n.present()) {
      for (final Iterator<INode> e = n.elements(); e.hasNext();) {
        e.next().accept(this);
        }
      return;
    } else
      return;
  }

  public void visit(final NodeOptional n) {
    if (n.present()) {
      n.node.accept(this);
      return;
    } else
      return;
  }

  public void visit(final NodeSequence n) {
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      e.next().accept(this);
    }
    return;
  }

  public void visit(final NodeTCF n) {
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return;
  }

  public void visit(final NodeToken n) {
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return;
  }

  public void visit(final Goal n) {
    // f0 -> MainClass()
    n.f0.accept(this);
    // f1 -> ( TypeDeclaration() )*
    n.f1.accept(this);
    // f2 -> <EOF>
    n.f2.accept(this);
  }

  public void visit(final MainClass n) {
    // f0 -> "class"
    n.f0.accept(this);
    // f1 -> Identifier()
    n.f1.accept(this);
    // f2 -> "{"
    n.f2.accept(this);
    // f3 -> "public"
    n.f3.accept(this);
    // f4 -> "static"
    n.f4.accept(this);
    // f5 -> "void"
    n.f5.accept(this);
    // f6 -> "main"
    n.f6.accept(this);
    // f7 -> "("
    n.f7.accept(this);
    // f8 -> "String"
    n.f8.accept(this);
    // f9 -> "["
    n.f9.accept(this);
    // f10 -> "]"
    n.f10.accept(this);
    // f11 -> Identifier()
    n.f11.accept(this);
    // f12 -> ")"
    n.f12.accept(this);
    // f13 -> "{"
    n.f13.accept(this);
    // f14 -> ( VarDeclaration() )*
    n.f14.accept(this);
    // f15 -> ( Statement() )*
    n.f15.accept(this);
    // f16 -> "}"
    n.f16.accept(this);
    // f17 -> "}"
    n.f17.accept(this);
  }

  public void visit(final TypeDeclaration n) {
    // f0 -> . %0 ClassDeclaration()
    // .. .. | %1 ClassExtendsDeclaration()
    n.f0.accept(this);
  }

  public void visit(final ClassDeclaration n) {
    // f0 -> "class"
    n.f0.accept(this);
    // f1 -> Identifier()
    n.f1.accept(this);
    // f2 -> "{"
    n.f2.accept(this);
    // f3 -> ( VarDeclaration() )*
    n.f3.accept(this);
    // f4 -> ( MethodDeclaration() )*
    n.f4.accept(this);
    // f5 -> "}"
    n.f5.accept(this);
  }

  public void visit(final ClassExtendsDeclaration n) {
    // f0 -> "class"
    n.f0.accept(this);
    // f1 -> Identifier()
    n.f1.accept(this);
    // f2 -> "extends"
    n.f2.accept(this);
    // f3 -> Identifier()
    n.f3.accept(this);
    // f4 -> "{"
    n.f4.accept(this);
    // f5 -> ( VarDeclaration() )*
    n.f5.accept(this);
    // f6 -> ( MethodDeclaration() )*
    n.f6.accept(this);
    // f7 -> "}"
    n.f7.accept(this);
  }

  public void visit(final VarDeclaration n) {
    // f0 -> Type()
    n.f0.accept(this);
    // f1 -> Identifier()
    n.f1.accept(this);
    // f2 -> ";"
    n.f2.accept(this);
  }

  public void visit(final MethodDeclaration n) {
    // f0 -> "public"
    n.f0.accept(this);
    // f1 -> Type()
    n.f1.accept(this);
    // f2 -> Identifier()
    n.f2.accept(this);
    // f3 -> "("
    n.f3.accept(this);
    // f4 -> ( FormalParameterList() )?
    n.f4.accept(this);
    // f5 -> ")"
    n.f5.accept(this);
    // f6 -> "{"
    n.f6.accept(this);
    // f7 -> ( VarDeclaration() )*
    n.f7.accept(this);
    // f8 -> ( Statement() )*
    n.f8.accept(this);
    // f9 -> "return"
    n.f9.accept(this);
    // f10 -> Expression()
    n.f10.accept(this);
    // f11 -> ";"
    n.f11.accept(this);
    // f12 -> "}"
    n.f12.accept(this);
  }

  public void visit(final FormalParameterList n) {
    // f0 -> FormalParameter()
    n.f0.accept(this);
    // f1 -> ( FormalParameterRest() )*
    n.f1.accept(this);
  }

  public void visit(final FormalParameter n) {
    // f0 -> Type()
    n.f0.accept(this);
    // f1 -> Identifier()
    n.f1.accept(this);
  }

  public void visit(final FormalParameterRest n) {
    // f0 -> ","
    n.f0.accept(this);
    // f1 -> FormalParameter()
    n.f1.accept(this);
  }

  public void visit(final Type n) {
    // f0 -> . %0 ArrayType()
    // .. .. | %1 BooleanType()
    // .. .. | %2 IntegerType()
    // .. .. | %3 Identifier()
    n.f0.accept(this);
  }

  public void visit(final ArrayType n) {
    // f0 -> "int"
    n.f0.accept(this);
    // f1 -> "["
    n.f1.accept(this);
    // f2 -> "]"
    n.f2.accept(this);
  }

  public void visit(final BooleanType n) {
    // f0 -> "boolean"
    n.f0.accept(this);
  }

  public void visit(final IntegerType n) {
    // f0 -> "int"
    n.f0.accept(this);
  }

  public void visit(final Statement n) {
    // f0 -> . %0 Block()
    // .. .. | %1 AssignmentStatement()
    // .. .. | %2 ArrayAssignmentStatement()
    // .. .. | %3 IfStatement()
    // .. .. | %4 WhileStatement()
    // .. .. | %5 PrintStatement()
    n.f0.accept(this);
  }

  public void visit(final Block n) {
    // f0 -> "{"
    n.f0.accept(this);
    // f1 -> ( Statement() )*
    n.f1.accept(this);
    // f2 -> "}"
    n.f2.accept(this);
  }

  public void visit(final AssignmentStatement n) {
    // f0 -> Identifier()
    n.f0.accept(this);
    // f1 -> "="
    n.f1.accept(this);
    // f2 -> Expression()
    n.f2.accept(this);
    // f3 -> ";"
    n.f3.accept(this);
  }

  public void visit(final ArrayAssignmentStatement n) {
    // f0 -> Identifier()
    n.f0.accept(this);
    // f1 -> "["
    n.f1.accept(this);
    // f2 -> Expression()
    n.f2.accept(this);
    // f3 -> "]"
    n.f3.accept(this);
    // f4 -> "="
    n.f4.accept(this);
    // f5 -> Expression()
    n.f5.accept(this);
    // f6 -> ";"
    n.f6.accept(this);
  }

  public void visit(final IfStatement n) {
    // f0 -> "if"
    n.f0.accept(this);
    // f1 -> "("
    n.f1.accept(this);
    // f2 -> Expression()
    n.f2.accept(this);
    // f3 -> ")"
    n.f3.accept(this);
    // f4 -> Statement()
    n.f4.accept(this);
    // f5 -> "else"
    n.f5.accept(this);
    // f6 -> Statement()
    n.f6.accept(this);
  }

  public void visit(final WhileStatement n) {
    // f0 -> "while"
    n.f0.accept(this);
    // f1 -> "("
    n.f1.accept(this);
    // f2 -> Expression()
    n.f2.accept(this);
    // f3 -> ")"
    n.f3.accept(this);
    // f4 -> Statement()
    n.f4.accept(this);
  }

  public void visit(final PrintStatement n) {
    // f0 -> "System.out.println"
    n.f0.accept(this);
    // f1 -> "("
    n.f1.accept(this);
    // f2 -> Expression()
    n.f2.accept(this);
    // f3 -> ")"
    n.f3.accept(this);
    // f4 -> ";"
    n.f4.accept(this);
  }

  public void visit(final Expression n) {
    // f0 -> . %0 AndExpression()
    // .. .. | %1 CompareExpression()
    // .. .. | %2 PlusExpression()
    // .. .. | %3 MinusExpression()
    // .. .. | %4 TimesExpression()
    // .. .. | %5 ArrayLookup()
    // .. .. | %6 ArrayLength()
    // .. .. | %7 MessageSend()
    // .. .. | %8 PrimaryExpression()
    n.f0.accept(this);
  }

  public void visit(final AndExpression n) {
    // f0 -> PrimaryExpression()
    n.f0.accept(this);
    // f1 -> "&&"
    n.f1.accept(this);
    // f2 -> PrimaryExpression()
    n.f2.accept(this);
  }

  public void visit(final CompareExpression n) {
    // f0 -> PrimaryExpression()
    n.f0.accept(this);
    // f1 -> "<"
    n.f1.accept(this);
    // f2 -> PrimaryExpression()
    n.f2.accept(this);
  }

  public void visit(final PlusExpression n) {
    // f0 -> PrimaryExpression()
    n.f0.accept(this);
    // f1 -> "+"
    n.f1.accept(this);
    // f2 -> PrimaryExpression()
    n.f2.accept(this);
  }

  public void visit(final MinusExpression n) {
    // f0 -> PrimaryExpression()
    n.f0.accept(this);
    // f1 -> "-"
    n.f1.accept(this);
    // f2 -> PrimaryExpression()
    n.f2.accept(this);
  }

  public void visit(final TimesExpression n) {
    // f0 -> PrimaryExpression()
    n.f0.accept(this);
    // f1 -> "*"
    n.f1.accept(this);
    // f2 -> PrimaryExpression()
    n.f2.accept(this);
  }

  public void visit(final ArrayLookup n) {
    // f0 -> PrimaryExpression()
    n.f0.accept(this);
    // f1 -> "["
    n.f1.accept(this);
    // f2 -> PrimaryExpression()
    n.f2.accept(this);
    // f3 -> "]"
    n.f3.accept(this);
  }

  public void visit(final ArrayLength n) {
    // f0 -> PrimaryExpression()
    n.f0.accept(this);
    // f1 -> "."
    n.f1.accept(this);
    // f2 -> "length"
    n.f2.accept(this);
  }

  public void visit(final MessageSend n) {
    // f0 -> PrimaryExpression()
    n.f0.accept(this);
    // f1 -> "."
    n.f1.accept(this);
    // f2 -> Identifier()
    n.f2.accept(this);
    // f3 -> "("
    n.f3.accept(this);
    // f4 -> ( ExpressionList() )?
    n.f4.accept(this);
    // f5 -> ")"
    n.f5.accept(this);
  }

  public void visit(final ExpressionList n) {
    // f0 -> Expression()
    n.f0.accept(this);
    // f1 -> ( ExpressionRest() )*
    n.f1.accept(this);
  }

  public void visit(final ExpressionRest n) {
    // f0 -> ","
    n.f0.accept(this);
    // f1 -> Expression()
    n.f1.accept(this);
  }

  public void visit(final PrimaryExpression n) {
    // f0 -> . %0 IntegerLiteral()
    // .. .. | %1 TrueLiteral()
    // .. .. | %2 FalseLiteral()
    // .. .. | %3 Identifier()
    // .. .. | %4 ThisExpression()
    // .. .. | %5 ArrayAllocationExpression()
    // .. .. | %6 AllocationExpression()
    // .. .. | %7 NotExpression()
    // .. .. | %8 BracketExpression()
    n.f0.accept(this);
  }

  public void visit(final IntegerLiteral n) {
    // f0 -> <INTEGER_LITERAL>
    n.f0.accept(this);
  }

  public void visit(final TrueLiteral n) {
    // f0 -> "true"
    n.f0.accept(this);
  }

  public void visit(final FalseLiteral n) {
    // f0 -> "false"
    n.f0.accept(this);
  }

  public void visit(final Identifier n) {
    // f0 -> <IDENTIFIER>
    n.f0.accept(this);
  }

  public void visit(final ThisExpression n) {
    // f0 -> "this"
    n.f0.accept(this);
  }

  public void visit(final ArrayAllocationExpression n) {
    // f0 -> "new"
    n.f0.accept(this);
    // f1 -> "int"
    n.f1.accept(this);
    // f2 -> "["
    n.f2.accept(this);
    // f3 -> Expression()
    n.f3.accept(this);
    // f4 -> "]"
    n.f4.accept(this);
  }

  public void visit(final AllocationExpression n) {
    // f0 -> "new"
    n.f0.accept(this);
    // f1 -> Identifier()
    n.f1.accept(this);
    // f2 -> "("
    n.f2.accept(this);
    // f3 -> ")"
    n.f3.accept(this);
  }

  public void visit(final NotExpression n) {
    // f0 -> "!"
    n.f0.accept(this);
    // f1 -> Expression()
    n.f1.accept(this);
  }

  public void visit(final BracketExpression n) {
    // f0 -> "("
    n.f0.accept(this);
    // f1 -> Expression()
    n.f1.accept(this);
    // f2 -> ")"
    n.f2.accept(this);
  }

}
